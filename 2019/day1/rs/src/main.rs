fn main() {
    let modules: Vec<u32> = vec![
        51585, 137484, 73634, 71535, 87274, 74243, 127025, 66829, 138729, 145459, 118813, 82326,
        82518, 145032, 148699, 105958, 103969, 72689, 145061, 70385, 53104, 107851, 103392, 107051,
        123475, 123918, 56709, 89284, 86208, 71943, 109257, 108272, 124811, 142709, 115650, 53607,
        142891, 144135, 114277, 138671, 111998, 70838, 69802, 107210, 103319, 60377, 58639, 131863,
        100807, 118360, 52573, 108207, 128009, 96180, 148492, 112914, 72867, 140991, 131267,
        125123, 58393, 129615, 87239, 63085, 59231, 95007, 147712, 109838, 89829, 55634, 96163,
        52323, 106701, 141511, 125349, 137267, 50694, 53692, 57466, 117769, 63535, 101708, 113593,
        79163, 112327, 91994, 129674, 58076, 145062, 122730, 102481, 109994, 136271, 111178,
        117920, 107933, 104305, 99613, 68482, 126543,
    ];

    let module_fuel: u32 = modules.iter().map(calculate_fuel).fold(0, |sum, x| sum + x);
    println!("module fuel: {}", module_fuel);
}

// calculate_fuel :: Positive Integer n => n -> n
fn calculate_fuel(mass: &u32) -> u32 {
    if *mass < 6 {
        return 0;
    }

    let fuel = (((*mass as f32) / 3.0).floor() as u32) - 2;
    // part:1
    // return fuel;
    // part:2
    return fuel + calculate_fuel(&fuel);
}

#[test]
fn test_calculate_fuel() {
    assert_eq!(calculate_fuel(&12), 2); // part:1=2
    assert_eq!(calculate_fuel(&14), 2); // part:1=2
    assert_eq!(calculate_fuel(&1969), 966); // part:1=654
    assert_eq!(calculate_fuel(&100756), 50346); // part:1=33583
}
